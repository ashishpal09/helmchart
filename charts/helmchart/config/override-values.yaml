replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  tag: "stable-alpine3.17"
  digest: "sha256:5e1ccef1e821253829e415ac1e3eafe46920aab0bf67e0fe8a104c57dbfffdf7"

secret:
  enabled: true
  secrets:
    SECRET_KEY: "secret"

configmap:
  enabled: true
  configs:
    CONFIG_KEY: "configmap"

imagePullSecrets: [] 

nameOverride: "" 

fullnameOverride: "" 

pdbMinAvailable: 30% 

serviceAccount:
  enabled: true  
  annotations: {}       
  name: ""
  automountServiceAccountToken: false 

podAnnotations: {} 

podSecurityContext:
  runAsUser: 0
  runAsGroup: 0
  fsGroup: 0
  seccompProfile:
    type: RuntimeDefault

securityContext:
  capabilities:
    add: ["NET_ADMIN", "SYS_TIME"]
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false
  runAsGroup: 3000
  fsGroup: 2000

service: 
  enabled: true
  # type: ClusterIP 
  type: NodePort 
  port: 80   

istio:
  enabled: true
  virtualService:
    hosts: 
      - split.tech-tycoons.clouddrove.ca
      # - test-2.example.com
  gateway:
    names: 
      - "istio-system/istio-gateway"

ingress:    
  enabled: false 
  className: ""
  annotations: {}
  hosts:                        
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific

  tls: []


#####----------------------------split-Traffic----------------------#####
deployment2:
  enabled: true

destination:
  enabled: true


#################################################

resource:
  enabled: true
resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:      
  enabled: true 
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

poddisruptionbudget:
  enabled: true
  minAvailable: 30%

nodeSelector: {}

tolerations: []

affinity: {} 

cronJob: 
  enabled: false
  schedule: ""
  startingDeadlineSeconds: 3600
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 3
  resources: {}
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: "1.16.0" 
  secret:
    enabled: false
  configmap:
    enabled: false

metrics:
  enabled: false   
  portName: "prometheus" 
  port: 3001     
  targetPort: 3001 


volume:
  enabled: false
  mountPath: "/usr/share/nginx/html"
  hostPath: "/var/www/html"

storageClass:
  create: false
  existingClaim: ""
  # storageClassName: "mystorageclass"
  
  aws: false
  fileSystemId: fs-abcd1234xyz
  
  azure: false
  
  gcp: false

  provisioner: "k8s.io/minikube-hostpath"
  allowVolumeExpansion: false
  volumeBindingMode: Immediate

  persistence:
    enabled: false
    accessMode: ReadWriteOnce
    size: 512Mi
    persistentVolumeReclaimPolicy: ""

statefulSets:
  enabled: false

healthCheckProbes:
  enabled: true
  livenessProbe:
    httpGet:
      path: /
      port: http
  readinessProbe:
    httpGet:
      path: /
      port: http